/* -------------------------------------------------------------------
 *
 * This module has been developed by the Automatic Control Group
 * of the University of Salerno, Italy.
 *
 * Title:   getGravityCurrents.cpp
 * Author:  Antonio Annunziata, Vincenzo Petrone
 * Org.:    UNISA
 * Date:    Jul 7, 2023
 *
 * Refer to the header file for a description of this module.
 *
 * -------------------------------------------------------------------
 */

//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: getGravityCurrents.cpp
//
// MATLAB Coder version            : 5.6
// C/C++ source code generated on  : 14-Jul-2023 11:40:19
//

// Include Files
#include <cmath>
#include "ur10_inverse_dynamics_solver/getGravityCurrents.h"

// Function Definitions
//
// getGravityCurrents
//     GRAVITY_CURRENT = getGravityCurrents(IN1)
//
// Arguments    : const double in1[6]
//                double gravity_current[6]
// Return Type  : void
//
namespace ur10_inverse_dynamics_solver
{
void getGravityCurrents(const double in1[6], double gravity_current[6])
{
  double b_gravity_current_tmp;
  double c_gravity_current_tmp;
  double d_gravity_current_tmp;
  double e_gravity_current_tmp;
  double f_gravity_current_tmp;
  double g_gravity_current_tmp;
  double gravity_current_tmp;
  double gravity_current_tmp_tmp;
  double h_gravity_current_tmp;
  double i_gravity_current_tmp;
  double j_gravity_current_tmp;
  double k_gravity_current_tmp;
  double l_gravity_current_tmp;
  double m_gravity_current_tmp;
  double n_gravity_current_tmp;
  double o_gravity_current_tmp;
  double p_gravity_current_tmp;
  double q_gravity_current_tmp;
  double r_gravity_current_tmp;
  double t10;
  double t11;
  double t12;
  double t13;
  double t14;
  double t15;
  double t17;
  double t19;
  double t2;
  double t20;
  double t21;
  double t23;
  double t3;
  double t4;
  double t5;
  double t6;
  double t7;
  double t8;
  double t9;
  //     This function was generated by the Symbolic Math Toolbox version 9.3.
  //     14-Jul-2023 11:23:25
  t2 = std::cos(in1[1]);
  t3 = std::cos(in1[2]);
  t4 = std::cos(in1[3]);
  t5 = std::cos(in1[4]);
  t6 = std::cos(in1[5]);
  t7 = std::sin(in1[1]);
  t8 = std::sin(in1[2]);
  t9 = std::sin(in1[3]);
  t10 = std::sin(in1[4]);
  t11 = std::sin(in1[5]);
  t12 = in1[1] + in1[2];
  t13 = std::cos(t12);
  t14 = in1[3] + t12;
  t15 = std::sin(t12);
  t17 = std::cos(t14);
  t12 = in1[4] + t14;
  t19 = std::sin(t14);
  t14 -= in1[4];
  t20 = std::cos(t12);
  t21 = std::sin(t12);
  t23 = std::cos(t14);
  t12 = std::sin(t14);
  gravity_current[0] = 0.0;
  t14 = t2 * t3;
  gravity_current_tmp = t2 * t4;
  b_gravity_current_tmp = t3 * t4;
  gravity_current_tmp_tmp = t14 * t4;
  c_gravity_current_tmp = gravity_current_tmp_tmp * t5;
  d_gravity_current_tmp = t2 * t5;
  e_gravity_current_tmp = t3 * t5;
  f_gravity_current_tmp = t4 * t5;
  g_gravity_current_tmp = t14 * t6 * t9;
  h_gravity_current_tmp = gravity_current_tmp * t6 * t8;
  i_gravity_current_tmp = b_gravity_current_tmp * t6 * t7;
  j_gravity_current_tmp = t14 * t9 * t11;
  k_gravity_current_tmp = gravity_current_tmp * t8 * t11;
  l_gravity_current_tmp = b_gravity_current_tmp * t7 * t11;
  m_gravity_current_tmp = t6 * t7 * t8 * t9;
  n_gravity_current_tmp = t7 * t8 * t9 * t11;
  o_gravity_current_tmp = c_gravity_current_tmp * t6;
  c_gravity_current_tmp *= t11;
  p_gravity_current_tmp = d_gravity_current_tmp * t6 * t8 * t9;
  q_gravity_current_tmp = e_gravity_current_tmp * t6 * t7 * t9;
  r_gravity_current_tmp = f_gravity_current_tmp * t6 * t7 * t8;
  d_gravity_current_tmp = d_gravity_current_tmp * t8 * t9 * t11;
  e_gravity_current_tmp = e_gravity_current_tmp * t7 * t9 * t11;
  f_gravity_current_tmp = f_gravity_current_tmp * t7 * t8 * t11;
  gravity_current[1] = ((((((((t2 * -5.5890515155147762 + t7 * 0.0302563171838271) - t13 * 2.6108363476259209) + t15 * 0.016866164608139979) +
                            (((t17 * 0.0058448919007984988 + t19 * 0.19776029026325251) - t20 * 0.00339637375989025) - t21 * 0.014193086854840451)) +
                           (((t23 * -0.00339637375989025 + t12 * 0.014193086854840451) + g_gravity_current_tmp * 0.0047829040827199248) +
                            h_gravity_current_tmp * 0.0047829040827199248)) +
                          (((i_gravity_current_tmp * 0.0047829040827199248 + j_gravity_current_tmp * 0.017333312645463641) +
                            k_gravity_current_tmp * 0.017333312645463641) +
                           l_gravity_current_tmp * 0.017333312645463641)) +
                         (((m_gravity_current_tmp * -0.0047829040827199248 - n_gravity_current_tmp * 0.017333312645463641) -
                           o_gravity_current_tmp * 0.017333312645463641) +
                          c_gravity_current_tmp * 0.0047829040827199248)) +
                        (((p_gravity_current_tmp * 0.017333312645463641 + q_gravity_current_tmp * 0.017333312645463641) +
                          r_gravity_current_tmp * 0.017333312645463641) -
                         d_gravity_current_tmp * 0.0047829040827199248)) +
                       (e_gravity_current_tmp * -0.0047829040827199248 - f_gravity_current_tmp * 0.0047829040827199248);
  gravity_current[2] = (((((((t13 * -3.2903960552588978 - t15 * 0.017427282445017879) + t17 * 0.00401797406527367) + t19 * 0.24839454345884771) +
                           (((t20 * -0.005977745621878576 - t21 * 0.0188676473865306) - t23 * 0.005977745621878576) + t12 * 0.0188676473865306)) +
                          (((g_gravity_current_tmp * 0.0042728097029314568 + h_gravity_current_tmp * 0.0042728097029314568) +
                            i_gravity_current_tmp * 0.0042728097029314568) +
                           j_gravity_current_tmp * 0.003356903459829059)) +
                         (((k_gravity_current_tmp * 0.003356903459829059 + l_gravity_current_tmp * 0.003356903459829059) -
                           m_gravity_current_tmp * 0.0042728097029314568) -
                          n_gravity_current_tmp * 0.003356903459829059)) +
                        (((o_gravity_current_tmp * -0.003356903459829059 + c_gravity_current_tmp * 0.0042728097029314568) +
                          p_gravity_current_tmp * 0.003356903459829059) +
                         q_gravity_current_tmp * 0.003356903459829059)) +
                       (((r_gravity_current_tmp * 0.003356903459829059 - d_gravity_current_tmp * 0.0042728097029314568) -
                         e_gravity_current_tmp * 0.0042728097029314568) -
                        f_gravity_current_tmp * 0.0042728097029314568);
  gravity_current[3] = (((((((t17 * 0.002898326414146609 + t19 * 0.25055660689539888) - t20 * 0.018317605898523881) - t21 * 0.03440925202399861) +
                           (((t23 * -0.018317605898523881 + t12 * 0.03440925202399861) - g_gravity_current_tmp * 0.0079090496037280255) -
                            h_gravity_current_tmp * 0.0079090496037280255)) +
                          (((i_gravity_current_tmp * -0.0079090496037280255 + j_gravity_current_tmp * 0.0055710808048310169) +
                            k_gravity_current_tmp * 0.0055710808048310169) +
                           l_gravity_current_tmp * 0.0055710808048310169)) +
                         (((m_gravity_current_tmp * 0.0079090496037280255 - n_gravity_current_tmp * 0.0055710808048310169) -
                           o_gravity_current_tmp * 0.0055710808048310169) -
                          c_gravity_current_tmp * 0.0079090496037280255)) +
                        (((p_gravity_current_tmp * 0.0055710808048310169 + q_gravity_current_tmp * 0.0055710808048310169) +
                          r_gravity_current_tmp * 0.0055710808048310169) +
                         d_gravity_current_tmp * 0.0079090496037280255)) +
                       (e_gravity_current_tmp * 0.0079090496037280255 + f_gravity_current_tmp * 0.0079090496037280255);
  gravity_current[4] = (((t20 * 0.0010061020575685409 - t21 * 0.029351938116559319) - t23 * 0.0010061020575685409) - t12 * 0.029351938116559319) +
                       (t6 * t10 * t19 * -0.0062332719824807238 - t10 * t11 * t19 * 0.0015873623315545611);
  t14 *= t5;
  gravity_current_tmp *= t5;
  b_gravity_current_tmp *= t5;
  gravity_current[5] =
      (((((gravity_current_tmp_tmp * t6 * 0.0013887768289093251 + gravity_current_tmp_tmp * t11 * 0.0041894196040764831) -
          t2 * t6 * t8 * t9 * 0.0013887768289093251) -
         t3 * t6 * t7 * t9 * 0.0013887768289093251) +
        (((t4 * t6 * t7 * t8 * -0.0013887768289093251 - t2 * t8 * t9 * t11 * 0.0041894196040764831) - t3 * t7 * t9 * t11 * 0.0041894196040764831) -
         t4 * t7 * t8 * t11 * 0.0041894196040764831)) +
       (((t14 * t6 * t9 * 0.0041894196040764831 + gravity_current_tmp * t6 * t8 * 0.0041894196040764831) +
         b_gravity_current_tmp * t6 * t7 * 0.0041894196040764831) -
        t14 * t9 * t11 * 0.0013887768289093251)) +
      (((gravity_current_tmp * t8 * t11 * -0.0013887768289093251 - b_gravity_current_tmp * t7 * t11 * 0.0013887768289093251) -
        t5 * t6 * t7 * t8 * t9 * 0.0041894196040764831) +
       t5 * t7 * t8 * t9 * t11 * 0.0013887768289093251);
}

}  // namespace ur10_inverse_dynamics_solver

//
// File trailer for getGravityCurrents.cpp
//
// [EOF]
//
